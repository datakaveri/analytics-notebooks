2022-12-27 14:59:49,291 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,296 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,301 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,306 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,311 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,316 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,321 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,326 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,331 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,336 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,342 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,347 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,352 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,357 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,362 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,367 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,373 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,378 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,383 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,388 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,394 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,399 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,404 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,410 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,415 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,420 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,426 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,431 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,436 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,442 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,447 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,453 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,458 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,464 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,469 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,475 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,480 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,485 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,491 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,497 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,502 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,508 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,513 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,519 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,524 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,530 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,536 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,541 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,547 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,552 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,558 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,564 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,569 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,575 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,581 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,586 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,592 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,598 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,603 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,609 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,615 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,621 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,627 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,632 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,638 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,644 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,650 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,656 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,662 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,667 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,673 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,679 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,685 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,691 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,697 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,703 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,709 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,715 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,721 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,727 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,733 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,739 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,745 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,751 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,757 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,763 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,769 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,775 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,781 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,787 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,793 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,799 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,806 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,812 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,818 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,824 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,830 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,836 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,843 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,849 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,855 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,861 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,867 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,874 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,880 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,886 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,892 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,898 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,905 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,911 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,918 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,924 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,930 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,937 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,944 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,950 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,956 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,963 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,969 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,976 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,982 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,989 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:49,995 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,002 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,008 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,015 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,021 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,028 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,034 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,041 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,048 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,054 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,061 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,067 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,074 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,081 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,087 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,094 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,101 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,108 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,114 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,121 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,128 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,135 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,141 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,148 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,155 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,162 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,168 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,175 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,182 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,189 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,196 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,203 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,209 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,216 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,223 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,230 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,237 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,243 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,250 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,257 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,264 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,271 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,278 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,285 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,292 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,299 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,306 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,313 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,321 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,328 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,335 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,342 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,349 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,356 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,363 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,370 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,377 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,385 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,392 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,399 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,406 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,413 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,420 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,428 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,435 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,443 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,450 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,457 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,464 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,472 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,480 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,487 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,494 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,501 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,509 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,516 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,523 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,531 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,538 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,546 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,553 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,560 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,568 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,576 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,583 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,590 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,598 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,605 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,613 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,620 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,628 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,635 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,643 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,651 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,658 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,666 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,673 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,681 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,689 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,696 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,704 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,712 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,719 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,727 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,735 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,743 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,750 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,758 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,766 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,773 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,781 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,789 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,797 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,805 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,812 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,820 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,829 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,836 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,844 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,852 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,860 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,868 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,876 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,884 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,892 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,900 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,907 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,915 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,924 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,932 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,939 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,947 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,956 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,964 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,972 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,980 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,988 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:50,996 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,004 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,012 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,020 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,029 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,037 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,045 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,053 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,062 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,070 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,078 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,086 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,094 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,102 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,111 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,120 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,128 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,136 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,144 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,152 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,160 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,168 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,177 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,185 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,193 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,201 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,210 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,218 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,226 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,235 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,243 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,251 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,260 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,268 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,277 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,285 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,294 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,302 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,311 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,319 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,328 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,337 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,345 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,354 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,363 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,371 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,380 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,389 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,398 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,406 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,415 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,423 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,432 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,441 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,449 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,458 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,467 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,476 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,485 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,494 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,503 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,512 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,521 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,530 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,539 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,548 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,557 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,566 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,575 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,584 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,593 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,602 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,611 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,620 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,630 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,639 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,648 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,657 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,666 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,675 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,684 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,693 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,702 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,712 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,721 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,730 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,739 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,749 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,758 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,767 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,776 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,785 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,794 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,803 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,813 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,822 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,831 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,841 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,850 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,859 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,868 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,878 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,887 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,897 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,906 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,916 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,925 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,934 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,943 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,952 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,962 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,972 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,981 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:51,990 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,000 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,009 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,018 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,028 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,037 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,047 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,056 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,066 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,075 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,084 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,094 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,104 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,113 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,122 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,132 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,141 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,151 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,160 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,170 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,179 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,189 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,199 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,209 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,218 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,228 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,238 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,249 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,259 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,268 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,278 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,288 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,298 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,308 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,318 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,328 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,338 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,348 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,358 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,368 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,378 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,388 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,398 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,408 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,418 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,428 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,437 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,448 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,457 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,467 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,477 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,487 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,498 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,508 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,518 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,528 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,538 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,548 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,559 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,570 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,580 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,590 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,601 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,611 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,621 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,632 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,642 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,652 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,662 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,672 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,682 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,693 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,703 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,713 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,723 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,733 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,743 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,753 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,764 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,775 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,785 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,796 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,806 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,817 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,827 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,838 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,849 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,860 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,870 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,881 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,891 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,901 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,912 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,923 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,933 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,944 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,954 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,965 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,975 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,986 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:52,996 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,007 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,017 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,027 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,038 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,049 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,059 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,069 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,080 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,091 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,102 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,113 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,124 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,135 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,146 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,157 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,168 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,178 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,189 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,200 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,211 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,222 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,233 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,244 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,255 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,267 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,277 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,288 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,300 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,311 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,321 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,333 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,343 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,354 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,366 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,376 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,387 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,399 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,410 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,422 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,433 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,446 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,457 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,469 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,481 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,492 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,504 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,516 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,527 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,539 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,551 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,562 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,574 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,585 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,597 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,609 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,620 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,632 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,644 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,656 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,667 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,679 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,691 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,703 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,715 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,727 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,739 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,751 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,763 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,775 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,787 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,800 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,811 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,824 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,835 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,847 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,859 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,871 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,883 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,895 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,907 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,919 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,932 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,944 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,957 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,969 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,981 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:53,994 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,006 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,019 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,031 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,043 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,055 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,066 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,078 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,091 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,102 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,116 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,128 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,141 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,153 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,166 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,178 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,191 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,204 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,216 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,229 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,242 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,254 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,268 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,280 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,292 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,304 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,316 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,328 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,341 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,353 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,366 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,379 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,391 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,404 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,416 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,429 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,442 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,455 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,468 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,481 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,494 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,506 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,519 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,532 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,545 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,558 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,571 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,584 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,597 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,610 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,623 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,635 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,648 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,661 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,674 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,687 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,700 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,713 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,726 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,739 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,752 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,764 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,777 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,790 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,803 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,816 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,830 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,843 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,856 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,870 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,883 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,896 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,909 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,921 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,935 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,948 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,961 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,974 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:54,987 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,001 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,014 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,027 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,040 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,053 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,067 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,080 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,093 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,107 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,120 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,133 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,147 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,160 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,173 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,187 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,200 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,214 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,227 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,241 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,254 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,268 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,281 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,295 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,308 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,322 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,335 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,352 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,366 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,379 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,393 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,407 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,421 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,435 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,448 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,462 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,476 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,489 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,503 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,516 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,530 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,543 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,557 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,571 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,585 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,599 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,613 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,626 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,640 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,654 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,668 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,682 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,696 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,710 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,725 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,738 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,752 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,766 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,780 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,793 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,808 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,822 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,835 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,850 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,864 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,878 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,892 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,906 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,921 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,935 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,949 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,963 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,977 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:55,992 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,006 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,020 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,035 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,049 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,063 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,077 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,092 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,106 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,120 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,135 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,149 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,163 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,178 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,192 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,206 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,221 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,235 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,250 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,265 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,281 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,296 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,310 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,325 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,339 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,353 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,367 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,382 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,397 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,411 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,426 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,441 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,456 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,471 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,486 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,501 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,515 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,532 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,547 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,562 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,576 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,591 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,605 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,619 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,634 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,649 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,664 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,678 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,693 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,708 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,723 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,738 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,753 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,768 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,783 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,798 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,814 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,828 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,843 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,858 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,872 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,887 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,901 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,917 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,932 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,947 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,962 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,977 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:56,992 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,007 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,023 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,038 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,053 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,069 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,083 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,099 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,114 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,129 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,144 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,160 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,175 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,191 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,206 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,221 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,236 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,251 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,267 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,282 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,297 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,313 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,328 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,344 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,360 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,375 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,390 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,405 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,420 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,435 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,452 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,467 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,483 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,498 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,514 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,529 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,545 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,560 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,576 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,591 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,607 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,622 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,638 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,653 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,669 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,684 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,701 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,716 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,732 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,748 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,764 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,780 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,795 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,811 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,827 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,843 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,859 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,875 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,891 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,907 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,923 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,938 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,954 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,969 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:57,986 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,001 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,018 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,034 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,050 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,066 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,082 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,098 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,114 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,131 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,147 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,164 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,180 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,197 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,212 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,229 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,245 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,261 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,277 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,294 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,310 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,326 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,342 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,358 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,375 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,392 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,408 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,424 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,440 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,456 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,472 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,488 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,504 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,520 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,536 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,552 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,568 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,586 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,602 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,619 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,636 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,653 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,670 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,688 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,706 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,722 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,739 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,755 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,771 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,787 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,803 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,820 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,836 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,853 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,870 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,886 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,903 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,920 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,938 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,955 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,972 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:58,989 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,006 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,022 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,038 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,054 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,071 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,087 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,103 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,120 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,137 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,154 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,171 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,189 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,206 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,223 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,240 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,257 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,275 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,291 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,308 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,325 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,342 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,359 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,376 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,393 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,410 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,427 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,444 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,461 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,478 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,495 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,512 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,529 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,548 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,565 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,583 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,601 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,619 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,636 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,654 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,672 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,690 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,708 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,726 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,744 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,762 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,779 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,797 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,815 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,833 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,850 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,868 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,886 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,904 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,922 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,940 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,958 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,976 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 14:59:59,994 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,013 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,032 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,051 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,070 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,089 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,107 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,125 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,142 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,160 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,178 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,196 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,214 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,232 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,251 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,270 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,288 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,307 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,325 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,343 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,362 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,381 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,400 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,418 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,437 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,456 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,474 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,493 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,512 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,530 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,548 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,567 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,586 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,605 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,624 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,643 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,661 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,679 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,698 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,716 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,735 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,754 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,773 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,792 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,810 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,829 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,847 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,867 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,886 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,905 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,924 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,943 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,962 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:00,981 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,000 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,018 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,038 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,057 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,076 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,095 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,114 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,133 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,153 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,172 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,191 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,210 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,229 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,248 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,267 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,287 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,307 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,326 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,346 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,365 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,384 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,404 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,423 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,442 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,462 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,481 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,500 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,519 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,539 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,558 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,577 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,596 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,616 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,635 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,655 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,674 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,693 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,712 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,731 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,751 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,770 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,790 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,809 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,828 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,848 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,868 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,888 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,908 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,928 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,947 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,966 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:01,986 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,006 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,025 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,045 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,064 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,084 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,104 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,124 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,144 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,164 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,184 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,204 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,223 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,243 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,262 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,282 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,301 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,322 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,342 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,362 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,381 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,401 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,422 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,443 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,462 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,482 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,502 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,522 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,542 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,562 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,581 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,602 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,623 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,643 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,663 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,684 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,704 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,724 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,744 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,763 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,784 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,804 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,824 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,844 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,864 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,884 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,905 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,925 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,945 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,966 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:02,986 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,007 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,027 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,046 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,067 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,087 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,107 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,128 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,148 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,169 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,190 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,211 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,231 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,252 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,272 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,292 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,313 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,333 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,354 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,375 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,396 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,416 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,437 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,458 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,479 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,499 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,520 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,540 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,561 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,581 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,602 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,623 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,643 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,664 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,685 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,707 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,728 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,749 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,770 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,790 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,811 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,832 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,853 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,875 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,895 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,916 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,938 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,959 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:03,979 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,001 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,022 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,043 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,063 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,083 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,104 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,126 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,147 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,168 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,189 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,210 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,231 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,253 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,274 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,295 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,316 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,337 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,358 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,379 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,400 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,421 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,443 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,464 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,486 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,508 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,529 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,550 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,572 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,593 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,614 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,635 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,656 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,678 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,700 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,722 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,744 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,765 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,787 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,809 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,830 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,852 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,874 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,895 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,916 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,938 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,960 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:04,981 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,003 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,025 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,047 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,069 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,090 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,111 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,133 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,154 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,176 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,198 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,220 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,242 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,263 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,285 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,307 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,328 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,350 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,371 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,393 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,415 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,437 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,459 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,480 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,503 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,525 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,548 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,570 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,592 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,614 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,636 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,658 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,681 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,703 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,725 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,747 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,770 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,792 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,815 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,837 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,859 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,881 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,903 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,925 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,947 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,969 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:05,991 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,014 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,036 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,059 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,082 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,105 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,128 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,150 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,173 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,196 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,218 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,241 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,263 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,285 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,308 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,331 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,354 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,377 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,399 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,422 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,446 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,469 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,492 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,515 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,537 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,560 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,583 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,606 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,629 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,651 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,674 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,698 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,720 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,743 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,766 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,788 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,811 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,834 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,857 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,880 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,903 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,926 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,948 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,970 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:06,993 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,016 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,039 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,061 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,084 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,107 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,130 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,153 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,176 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,199 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,221 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,244 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,266 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,289 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,312 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,335 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,359 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,381 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,405 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,428 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,451 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,473 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,496 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,519 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,542 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,564 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,587 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,610 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,633 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,657 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,680 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,704 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,726 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,748 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,772 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,796 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,819 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,842 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,864 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,888 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,911 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,935 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,958 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:07,981 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,004 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,027 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,050 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,073 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,096 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,119 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,142 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,166 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,189 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,211 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,234 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,256 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,279 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,302 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,325 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,348 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,371 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,394 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,418 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,442 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,465 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,489 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,513 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,536 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,559 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,582 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,606 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,630 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,654 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,677 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,700 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,723 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,746 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,770 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,793 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,816 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,840 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,863 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,887 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,911 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,935 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,959 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:08,982 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,005 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,029 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,052 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,076 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,100 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,125 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,148 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,173 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,198 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,222 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,245 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,269 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,293 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,317 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,341 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,365 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,390 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,414 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,439 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,463 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,488 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,513 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,537 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,561 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,586 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,610 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,635 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,660 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,684 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,709 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,734 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,759 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,783 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,808 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,833 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,858 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,882 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,907 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,932 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,957 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:09,983 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,007 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,032 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,057 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,082 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,107 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,131 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,156 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,181 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,208 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,234 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,260 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,286 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,311 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,336 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,361 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,385 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,410 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,435 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,460 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,485 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,510 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,535 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,560 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,585 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,609 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,634 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,658 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,684 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,709 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,733 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,759 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,784 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,809 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,835 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,860 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,885 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,910 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,936 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,961 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:10,986 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,011 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,037 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,062 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,088 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,113 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,138 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,162 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,188 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,213 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,239 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,264 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,289 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,315 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,340 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,366 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,391 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,416 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,442 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,468 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,494 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,519 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,544 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,570 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,595 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,621 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,647 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,673 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,698 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,724 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,750 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,776 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,801 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,827 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,853 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,879 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,904 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,930 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,955 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:11,980 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,006 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,032 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,057 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,083 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,109 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,136 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,162 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,188 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,214 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,239 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,264 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,291 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,317 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,343 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,369 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,395 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,421 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,448 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,474 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,500 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,525 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,551 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,577 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,604 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,630 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,657 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,684 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,711 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,738 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,764 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,791 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,818 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,845 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,871 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,897 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,923 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,949 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:12,975 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,002 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,028 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,055 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,081 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,108 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,134 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,161 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,188 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,215 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,243 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,270 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,296 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,323 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,351 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,377 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,404 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,430 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,458 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,485 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,512 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,539 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,566 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,592 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,619 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,645 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,672 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,699 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,726 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,754 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,781 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,807 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,833 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,860 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,887 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,914 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,941 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,967 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:13,994 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,022 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,048 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,076 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,104 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,131 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,158 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,185 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,212 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,240 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,267 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,294 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,322 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,349 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,376 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,403 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,429 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,457 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,484 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,511 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,539 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,566 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,594 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,621 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,647 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,675 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,703 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,731 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,758 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,785 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,813 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,841 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,867 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,895 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,923 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,950 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:14,977 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:15,004 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:15,031 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:15,059 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:15,087 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:15,115 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:15,142 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:15,170 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:15,198 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:15,225 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:15,253 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:92: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  hourly_data[str(hourly_data.iloc[i][1][j][0])]=temp2

2022-12-27 15:00:15,312 - kedro.io.data_catalog - INFO - Saving data to 'hourly_data' (ParquetDataSet)...
2022-12-27 15:00:15,519 - kedro.runner.sequential_runner - INFO - Completed 5 out of 9 tasks
2022-12-27 15:00:15,521 - kedro.io.data_catalog - INFO - Loading data from 'hourly_data' (ParquetDataSet)...
2022-12-27 15:00:15,629 - kedro.io.data_catalog - INFO - Loading data from 'params:train_portion' (MemoryDataSet)...
2022-12-27 15:00:15,631 - kedro.pipeline.node - INFO - Running node: train_test_split: train_test_split([hourly_data,params:train_portion]) -> [train_data,test_data]
2022-12-27 15:00:15,633 - kedro.io.data_catalog - INFO - Saving data to 'train_data' (ParquetDataSet)...
2022-12-27 15:00:15,636 - kedro.runner.sequential_runner - WARNING - There are 4 nodes that have not run.
You can resume the pipeline run from the nearest nodes with persisted inputs by adding the following argument to your previous command:
  --from-nodes "scale_data,data_filtering,get_adjacency_matrix"
2022-12-27 15:08:35,020 - kedro.framework.session.session - INFO - Kedro project tgcn
2022-12-27 15:08:38,359 - kedro.io.data_catalog - INFO - Loading data from 'hourly_data' (ParquetDataSet)...
2022-12-27 15:08:38,494 - kedro.io.data_catalog - INFO - Loading data from 'params:train_portion' (MemoryDataSet)...
2022-12-27 15:08:38,496 - kedro.pipeline.node - INFO - Running node: train_test_split: train_test_split([hourly_data,params:train_portion]) -> [train_data,test_data]
2022-12-27 15:08:38,500 - kedro.io.data_catalog - INFO - Saving data to 'train_data' (ParquetDataSet)...
2022-12-27 15:08:38,619 - kedro.io.data_catalog - INFO - Saving data to 'test_data' (ParquetDataSet)...
2022-12-27 15:08:38,642 - kedro.runner.sequential_runner - INFO - Completed 1 out of 4 tasks
2022-12-27 15:08:38,643 - kedro.io.data_catalog - INFO - Loading data from 'train_data' (ParquetDataSet)...
2022-12-27 15:08:38,733 - kedro.io.data_catalog - INFO - Loading data from 'test_data' (ParquetDataSet)...
2022-12-27 15:08:38,764 - kedro.pipeline.node - INFO - Running node: scale_data: scale_data([train_data,test_data]) -> [train_scaled,test_scaled]
2022-12-27 15:08:38,767 - kedro.io.data_catalog - INFO - Saving data to 'train_scaled' (ParquetDataSet)...
2022-12-27 15:08:39,055 - kedro.io.data_catalog - INFO - Saving data to 'test_scaled' (ParquetDataSet)...
2022-12-27 15:08:39,079 - kedro.runner.sequential_runner - INFO - Completed 2 out of 4 tasks
2022-12-27 15:08:39,080 - kedro.io.data_catalog - INFO - Loading data from 'params:seq_len' (MemoryDataSet)...
2022-12-27 15:08:39,081 - kedro.io.data_catalog - INFO - Loading data from 'params:pre_len' (MemoryDataSet)...
2022-12-27 15:08:39,082 - kedro.io.data_catalog - INFO - Loading data from 'train_scaled' (ParquetDataSet)...
2022-12-27 15:08:39,170 - kedro.io.data_catalog - INFO - Loading data from 'test_scaled' (ParquetDataSet)...
2022-12-27 15:08:39,203 - kedro.pipeline.node - INFO - Running node: sequential_data_preparation: sequence_data_preparation1([params:seq_len,params:pre_len,train_scaled,test_scaled]) -> [trainX,trainY,testX,testY]
2022-12-27 15:08:39,211 - kedro.io.data_catalog - INFO - Saving data to 'trainX' (ParquetDataSet)...
2022-12-27 15:08:39,214 - kedro.runner.sequential_runner - WARNING - There are 2 nodes that have not run.
You can resume the pipeline run from the nearest nodes with persisted inputs by adding the following argument to your previous command:
  --from-nodes "scale_data"
2022-12-27 15:14:12,079 - kedro.framework.session.session - INFO - Kedro project tgcn
2022-12-27 15:14:15,356 - kedro.io.data_catalog - INFO - Loading data from 'hourly_data' (ParquetDataSet)...
2022-12-27 15:14:15,481 - kedro.io.data_catalog - INFO - Loading data from 'params:train_portion' (MemoryDataSet)...
2022-12-27 15:14:15,483 - kedro.pipeline.node - INFO - Running node: train_test_split: train_test_split([hourly_data,params:train_portion]) -> [train_data,test_data]
2022-12-27 15:14:15,490 - kedro.io.data_catalog - INFO - Saving data to 'train_data' (ParquetDataSet)...
2022-12-27 15:14:15,615 - kedro.io.data_catalog - INFO - Saving data to 'test_data' (ParquetDataSet)...
2022-12-27 15:14:15,638 - kedro.runner.sequential_runner - INFO - Completed 1 out of 4 tasks
2022-12-27 15:14:15,640 - kedro.io.data_catalog - INFO - Loading data from 'train_data' (ParquetDataSet)...
2022-12-27 15:14:15,725 - kedro.io.data_catalog - INFO - Loading data from 'test_data' (ParquetDataSet)...
2022-12-27 15:14:15,752 - kedro.pipeline.node - INFO - Running node: scale_data: scale_data([train_data,test_data]) -> [train_scaled,test_scaled]
2022-12-27 15:14:15,755 - kedro.io.data_catalog - INFO - Saving data to 'train_scaled' (ParquetDataSet)...
2022-12-27 15:14:16,046 - kedro.io.data_catalog - INFO - Saving data to 'test_scaled' (ParquetDataSet)...
2022-12-27 15:14:16,070 - kedro.runner.sequential_runner - INFO - Completed 2 out of 4 tasks
2022-12-27 15:14:16,071 - kedro.io.data_catalog - INFO - Loading data from 'params:seq_len' (MemoryDataSet)...
2022-12-27 15:14:16,072 - kedro.io.data_catalog - INFO - Loading data from 'params:pre_len' (MemoryDataSet)...
2022-12-27 15:14:16,073 - kedro.io.data_catalog - INFO - Loading data from 'train_scaled' (ParquetDataSet)...
2022-12-27 15:14:16,171 - kedro.io.data_catalog - INFO - Loading data from 'test_scaled' (ParquetDataSet)...
2022-12-27 15:14:16,204 - kedro.pipeline.node - INFO - Running node: sequential_data_preparation: sequence_data_preparation1([params:seq_len,params:pre_len,train_scaled,test_scaled]) -> [trainX,trainY,testX,testY]
2022-12-27 15:14:16,210 - kedro.io.data_catalog - INFO - Saving data to 'trainX' (ParquetDataSet)...
2022-12-27 15:14:16,234 - kedro.io.data_catalog - INFO - Saving data to 'trainY' (ParquetDataSet)...
2022-12-27 15:14:16,242 - kedro.io.data_catalog - INFO - Saving data to 'testX' (ParquetDataSet)...
2022-12-27 15:14:16,261 - kedro.io.data_catalog - INFO - Saving data to 'testY' (ParquetDataSet)...
2022-12-27 15:14:16,268 - kedro.runner.sequential_runner - INFO - Completed 3 out of 4 tasks
2022-12-27 15:14:16,270 - kedro.io.data_catalog - INFO - Loading data from 'matrix' (ParquetDataSet)...
2022-12-27 15:14:16,274 - kedro.io.data_catalog - INFO - Loading data from 'hex_loc' (ParquetDataSet)...
2022-12-27 15:14:16,279 - kedro.io.data_catalog - INFO - Loading data from 'params:learning_rate' (MemoryDataSet)...
2022-12-27 15:14:16,280 - kedro.io.data_catalog - INFO - Loading data from 'trainX' (ParquetDataSet)...
2022-12-27 15:14:16,296 - kedro.io.data_catalog - INFO - Loading data from 'trainY' (ParquetDataSet)...
2022-12-27 15:14:16,301 - kedro.io.data_catalog - INFO - Loading data from 'testX' (ParquetDataSet)...
2022-12-27 15:14:16,316 - kedro.io.data_catalog - INFO - Loading data from 'testY' (ParquetDataSet)...
2022-12-27 15:14:16,320 - kedro.pipeline.node - INFO - Running node: model_define_initialize: model_initialize([matrix,hex_loc,params:learning_rate,trainX,trainY,testX,testY]) -> [y_pred_testX]
2022-12-27 15:15:46,884 - kedro.io.data_catalog - INFO - Saving data to 'y_pred_testX' (ParquetDataSet)...
2022-12-27 15:15:46,887 - kedro.runner.sequential_runner - WARNING - There are 1 nodes that have not run.
You can resume the pipeline run from the nearest nodes with persisted inputs by adding the following argument to your previous command:
  --from-nodes "scale_data"
2022-12-27 15:17:36,774 - kedro.framework.session.session - INFO - Kedro project tgcn
2022-12-27 15:17:40,191 - kedro.io.data_catalog - INFO - Loading data from 'hourly_data' (ParquetDataSet)...
2022-12-27 15:17:40,330 - kedro.io.data_catalog - INFO - Loading data from 'params:train_portion' (MemoryDataSet)...
2022-12-27 15:17:40,332 - kedro.pipeline.node - INFO - Running node: train_test_split: train_test_split([hourly_data,params:train_portion]) -> [train_data,test_data]
2022-12-27 15:17:40,336 - kedro.io.data_catalog - INFO - Saving data to 'train_data' (ParquetDataSet)...
2022-12-27 15:17:40,475 - kedro.io.data_catalog - INFO - Saving data to 'test_data' (ParquetDataSet)...
2022-12-27 15:17:40,505 - kedro.runner.sequential_runner - INFO - Completed 1 out of 4 tasks
2022-12-27 15:17:40,506 - kedro.io.data_catalog - INFO - Loading data from 'train_data' (ParquetDataSet)...
2022-12-27 15:17:40,601 - kedro.io.data_catalog - INFO - Loading data from 'test_data' (ParquetDataSet)...
2022-12-27 15:17:40,623 - kedro.pipeline.node - INFO - Running node: scale_data: scale_data([train_data,test_data]) -> [train_scaled,test_scaled]
2022-12-27 15:17:40,626 - kedro.io.data_catalog - INFO - Saving data to 'train_scaled' (ParquetDataSet)...
2022-12-27 15:17:40,949 - kedro.io.data_catalog - INFO - Saving data to 'test_scaled' (ParquetDataSet)...
2022-12-27 15:17:40,977 - kedro.runner.sequential_runner - INFO - Completed 2 out of 4 tasks
2022-12-27 15:17:40,978 - kedro.io.data_catalog - INFO - Loading data from 'params:seq_len' (MemoryDataSet)...
2022-12-27 15:17:40,980 - kedro.io.data_catalog - INFO - Loading data from 'params:pre_len' (MemoryDataSet)...
2022-12-27 15:17:40,981 - kedro.io.data_catalog - INFO - Loading data from 'train_scaled' (ParquetDataSet)...
2022-12-27 15:17:41,069 - kedro.io.data_catalog - INFO - Loading data from 'test_scaled' (ParquetDataSet)...
2022-12-27 15:17:41,092 - kedro.pipeline.node - INFO - Running node: sequential_data_preparation: sequence_data_preparation1([params:seq_len,params:pre_len,train_scaled,test_scaled]) -> [trainX,trainY,testX,testY]
2022-12-27 15:17:41,098 - kedro.io.data_catalog - INFO - Saving data to 'trainX' (ParquetDataSet)...
2022-12-27 15:17:41,121 - kedro.io.data_catalog - INFO - Saving data to 'trainY' (ParquetDataSet)...
2022-12-27 15:17:41,128 - kedro.io.data_catalog - INFO - Saving data to 'testX' (ParquetDataSet)...
2022-12-27 15:17:41,146 - kedro.io.data_catalog - INFO - Saving data to 'testY' (ParquetDataSet)...
2022-12-27 15:17:41,151 - kedro.runner.sequential_runner - INFO - Completed 3 out of 4 tasks
2022-12-27 15:17:41,152 - kedro.io.data_catalog - INFO - Loading data from 'matrix' (ParquetDataSet)...
2022-12-27 15:17:41,156 - kedro.io.data_catalog - INFO - Loading data from 'hex_loc' (ParquetDataSet)...
2022-12-27 15:17:41,159 - kedro.io.data_catalog - INFO - Loading data from 'params:learning_rate' (MemoryDataSet)...
2022-12-27 15:17:41,160 - kedro.io.data_catalog - INFO - Loading data from 'trainX' (ParquetDataSet)...
2022-12-27 15:17:41,175 - kedro.io.data_catalog - INFO - Loading data from 'trainY' (ParquetDataSet)...
2022-12-27 15:17:41,180 - kedro.io.data_catalog - INFO - Loading data from 'testX' (ParquetDataSet)...
2022-12-27 15:17:41,195 - kedro.io.data_catalog - INFO - Loading data from 'testY' (ParquetDataSet)...
2022-12-27 15:17:41,199 - kedro.pipeline.node - INFO - Running node: model_define_initialize: model_initialize([matrix,hex_loc,params:learning_rate,trainX,trainY,testX,testY]) -> [y_pred_testX]
2022-12-27 15:19:07,856 - kedro.io.data_catalog - INFO - Saving data to 'y_pred_testX' (ParquetDataSet)...
2022-12-27 15:19:07,861 - kedro.runner.sequential_runner - INFO - Completed 4 out of 4 tasks
2022-12-27 15:19:07,863 - kedro.runner.sequential_runner - INFO - Pipeline execution completed successfully.
2022-12-28 17:20:14,815 - kedro.framework.session.session - INFO - Kedro project tgcn
2022-12-28 17:20:47,110 - kedro.io.data_catalog - INFO - Loading data from 'filtered_data' (ParquetDataSet)...
2022-12-28 17:20:48,363 - kedro.pipeline.node - INFO - Running node: plot: compare_passenger_capacity([filtered_data]) -> [plot]
2022-12-28 17:20:48,488 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:234: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  return data_plot.groupby(["h3_ids_9"]).mean().reset_index()

2022-12-28 17:20:48,492 - kedro.io.data_catalog - INFO - Saving data to 'plot' (PlotlyDataSet)...
2022-12-28 17:20:48,709 - kedro.runner.sequential_runner - WARNING - No nodes ran. Repeat the previous command to attempt a new run.
2022-12-28 17:25:15,834 - kedro.framework.session.session - INFO - Kedro project tgcn
2022-12-28 17:25:21,236 - kedro.io.data_catalog - INFO - Loading data from 'filtered_data' (ParquetDataSet)...
2022-12-28 17:25:21,367 - kedro.pipeline.node - INFO - Running node: plot: compare_passenger_capacity([filtered_data]) -> [plot]
2022-12-28 17:25:21,423 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:234: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  return data_plot.groupby(["h3_ids_9"]).mean().reset_index()

2022-12-28 17:25:21,427 - kedro.io.data_catalog - INFO - Saving data to 'plot' (PlotlyDataSet)...
2022-12-28 17:25:24,414 - kedro.runner.sequential_runner - INFO - Completed 1 out of 5 tasks
2022-12-28 17:25:24,416 - kedro.io.data_catalog - INFO - Loading data from 'hourly_data' (ParquetDataSet)...
2022-12-28 17:25:24,788 - kedro.io.data_catalog - INFO - Loading data from 'params:train_portion' (MemoryDataSet)...
2022-12-28 17:25:24,791 - kedro.pipeline.node - INFO - Running node: train_test_split: train_test_split([hourly_data,params:train_portion]) -> [train_data,test_data]
2022-12-28 17:25:24,795 - kedro.io.data_catalog - INFO - Saving data to 'train_data' (ParquetDataSet)...
2022-12-28 17:25:25,002 - kedro.io.data_catalog - INFO - Saving data to 'test_data' (ParquetDataSet)...
2022-12-28 17:25:25,033 - kedro.runner.sequential_runner - INFO - Completed 2 out of 5 tasks
2022-12-28 17:25:25,034 - kedro.io.data_catalog - INFO - Loading data from 'train_data' (ParquetDataSet)...
2022-12-28 17:25:25,135 - kedro.io.data_catalog - INFO - Loading data from 'test_data' (ParquetDataSet)...
2022-12-28 17:25:25,170 - kedro.pipeline.node - INFO - Running node: scale_data: scale_data([train_data,test_data]) -> [train_scaled,test_scaled]
2022-12-28 17:25:25,173 - kedro.io.data_catalog - INFO - Saving data to 'train_scaled' (ParquetDataSet)...
2022-12-28 17:25:25,307 - kedro.io.data_catalog - INFO - Saving data to 'test_scaled' (ParquetDataSet)...
2022-12-28 17:25:25,335 - kedro.runner.sequential_runner - INFO - Completed 3 out of 5 tasks
2022-12-28 17:25:25,337 - kedro.io.data_catalog - INFO - Loading data from 'params:seq_len' (MemoryDataSet)...
2022-12-28 17:25:25,338 - kedro.io.data_catalog - INFO - Loading data from 'params:pre_len' (MemoryDataSet)...
2022-12-28 17:25:25,339 - kedro.io.data_catalog - INFO - Loading data from 'train_scaled' (ParquetDataSet)...
2022-12-28 17:25:25,439 - kedro.io.data_catalog - INFO - Loading data from 'test_scaled' (ParquetDataSet)...
2022-12-28 17:25:25,475 - kedro.pipeline.node - INFO - Running node: sequential_data_preparation: sequence_data_preparation1([params:seq_len,params:pre_len,train_scaled,test_scaled]) -> [trainX,trainY,testX,testY]
2022-12-28 17:25:25,481 - kedro.io.data_catalog - INFO - Saving data to 'trainX' (ParquetDataSet)...
2022-12-28 17:25:25,507 - kedro.io.data_catalog - INFO - Saving data to 'trainY' (ParquetDataSet)...
2022-12-28 17:25:25,515 - kedro.io.data_catalog - INFO - Saving data to 'testX' (ParquetDataSet)...
2022-12-28 17:25:25,535 - kedro.io.data_catalog - INFO - Saving data to 'testY' (ParquetDataSet)...
2022-12-28 17:25:25,540 - kedro.runner.sequential_runner - INFO - Completed 4 out of 5 tasks
2022-12-28 17:25:25,541 - kedro.io.data_catalog - INFO - Loading data from 'matrix' (ParquetDataSet)...
2022-12-28 17:25:25,545 - kedro.io.data_catalog - INFO - Loading data from 'hex_loc' (ParquetDataSet)...
2022-12-28 17:25:25,549 - kedro.io.data_catalog - INFO - Loading data from 'params:learning_rate' (MemoryDataSet)...
2022-12-28 17:25:25,551 - kedro.io.data_catalog - INFO - Loading data from 'trainX' (ParquetDataSet)...
2022-12-28 17:25:25,568 - kedro.io.data_catalog - INFO - Loading data from 'trainY' (ParquetDataSet)...
2022-12-28 17:25:25,574 - kedro.io.data_catalog - INFO - Loading data from 'testX' (ParquetDataSet)...
2022-12-28 17:25:25,589 - kedro.io.data_catalog - INFO - Loading data from 'testY' (ParquetDataSet)...
2022-12-28 17:25:25,594 - kedro.pipeline.node - INFO - Running node: model_define_initialize: model_initialize([matrix,hex_loc,params:learning_rate,trainX,trainY,testX,testY]) -> [y_pred_testX]
2022-12-28 17:26:56,120 - kedro.io.data_catalog - INFO - Saving data to 'y_pred_testX' (ParquetDataSet)...
2022-12-28 17:26:56,131 - kedro.runner.sequential_runner - INFO - Completed 5 out of 5 tasks
2022-12-28 17:26:56,133 - kedro.runner.sequential_runner - INFO - Pipeline execution completed successfully.
2022-12-28 17:30:37,152 - kedro.framework.session.session - INFO - Kedro project tgcn
2022-12-28 17:30:40,528 - kedro.io.data_catalog - INFO - Loading data from 'filtered_data' (ParquetDataSet)...
2022-12-28 17:30:40,660 - kedro.pipeline.node - INFO - Running node: plot: compare_passenger_capacity([filtered_data]) -> [plot]
2022-12-28 17:30:40,716 - py.warnings - WARNING - /home/saanidhya/Desktop/trying_kedro/tgcn/src/tgcn/pipelines/data_processing/nodes.py:234: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  return data_plot.groupby(["h3_ids_9"]).mean().reset_index()

2022-12-28 17:30:40,720 - kedro.io.data_catalog - INFO - Saving data to 'plot' (PlotlyDataSet)...
2022-12-28 17:30:40,903 - kedro.runner.sequential_runner - INFO - Completed 1 out of 5 tasks
2022-12-28 17:30:40,905 - kedro.io.data_catalog - INFO - Loading data from 'hourly_data' (ParquetDataSet)...
2022-12-28 17:30:41,175 - kedro.io.data_catalog - INFO - Loading data from 'params:train_portion' (MemoryDataSet)...
2022-12-28 17:30:41,177 - kedro.pipeline.node - INFO - Running node: train_test_split: train_test_split([hourly_data,params:train_portion]) -> [train_data,test_data]
2022-12-28 17:30:41,182 - kedro.io.data_catalog - INFO - Saving data to 'train_data' (ParquetDataSet)...
2022-12-28 17:30:41,319 - kedro.io.data_catalog - INFO - Saving data to 'test_data' (ParquetDataSet)...
2022-12-28 17:30:41,346 - kedro.runner.sequential_runner - INFO - Completed 2 out of 5 tasks
2022-12-28 17:30:41,347 - kedro.io.data_catalog - INFO - Loading data from 'train_data' (ParquetDataSet)...
2022-12-28 17:30:41,437 - kedro.io.data_catalog - INFO - Loading data from 'test_data' (ParquetDataSet)...
2022-12-28 17:30:41,458 - kedro.pipeline.node - INFO - Running node: scale_data: scale_data([train_data,test_data]) -> [train_scaled,test_scaled]
2022-12-28 17:30:41,461 - kedro.io.data_catalog - INFO - Saving data to 'train_scaled' (ParquetDataSet)...
2022-12-28 17:30:41,586 - kedro.io.data_catalog - INFO - Saving data to 'test_scaled' (ParquetDataSet)...
2022-12-28 17:30:41,613 - kedro.runner.sequential_runner - INFO - Completed 3 out of 5 tasks
2022-12-28 17:30:41,615 - kedro.io.data_catalog - INFO - Loading data from 'params:seq_len' (MemoryDataSet)...
2022-12-28 17:30:41,616 - kedro.io.data_catalog - INFO - Loading data from 'params:pre_len' (MemoryDataSet)...
2022-12-28 17:30:41,617 - kedro.io.data_catalog - INFO - Loading data from 'train_scaled' (ParquetDataSet)...
2022-12-28 17:30:41,707 - kedro.io.data_catalog - INFO - Loading data from 'test_scaled' (ParquetDataSet)...
2022-12-28 17:30:41,733 - kedro.pipeline.node - INFO - Running node: sequential_data_preparation: sequence_data_preparation1([params:seq_len,params:pre_len,train_scaled,test_scaled]) -> [trainX,trainY,testX,testY]
2022-12-28 17:30:41,740 - kedro.io.data_catalog - INFO - Saving data to 'trainX' (ParquetDataSet)...
2022-12-28 17:30:41,768 - kedro.io.data_catalog - INFO - Saving data to 'trainY' (ParquetDataSet)...
2022-12-28 17:30:41,777 - kedro.io.data_catalog - INFO - Saving data to 'testX' (ParquetDataSet)...
2022-12-28 17:30:41,797 - kedro.io.data_catalog - INFO - Saving data to 'testY' (ParquetDataSet)...
2022-12-28 17:30:41,803 - kedro.runner.sequential_runner - INFO - Completed 4 out of 5 tasks
2022-12-28 17:30:41,804 - kedro.io.data_catalog - INFO - Loading data from 'matrix' (ParquetDataSet)...
2022-12-28 17:30:41,809 - kedro.io.data_catalog - INFO - Loading data from 'hex_loc' (ParquetDataSet)...
2022-12-28 17:30:41,812 - kedro.io.data_catalog - INFO - Loading data from 'params:learning_rate' (MemoryDataSet)...
2022-12-28 17:30:41,813 - kedro.io.data_catalog - INFO - Loading data from 'trainX' (ParquetDataSet)...
2022-12-28 17:30:41,830 - kedro.io.data_catalog - INFO - Loading data from 'trainY' (ParquetDataSet)...
2022-12-28 17:30:41,835 - kedro.io.data_catalog - INFO - Loading data from 'testX' (ParquetDataSet)...
2022-12-28 17:30:41,851 - kedro.io.data_catalog - INFO - Loading data from 'testY' (ParquetDataSet)...
2022-12-28 17:30:41,855 - kedro.pipeline.node - INFO - Running node: model_define_initialize: model_initialize([matrix,hex_loc,params:learning_rate,trainX,trainY,testX,testY]) -> [y_pred_testX]
2022-12-28 17:32:09,884 - kedro.io.data_catalog - INFO - Saving data to 'y_pred_testX' (ParquetDataSet)...
2022-12-28 17:32:09,890 - kedro.runner.sequential_runner - INFO - Completed 5 out of 5 tasks
2022-12-28 17:32:09,891 - kedro.runner.sequential_runner - INFO - Pipeline execution completed successfully.
2022-12-28 17:41:01,347 - kedro.framework.session.session - INFO - Kedro project tgcn
2022-12-28 17:41:05,248 - kedro.io.data_catalog - INFO - Loading data from 'hourly_data' (ParquetDataSet)...
2022-12-28 17:41:05,399 - kedro.io.data_catalog - INFO - Loading data from 'params:train_portion' (MemoryDataSet)...
2022-12-28 17:41:05,401 - kedro.pipeline.node - INFO - Running node: train_test_split: train_test_split([hourly_data,params:train_portion]) -> [train_data,test_data,plot]
2022-12-28 17:41:05,406 - kedro.pipeline.node - ERROR - Node 'train_test_split: train_test_split([hourly_data,params:train_portion]) -> [train_data,test_data,plot]' failed with error: 
Failed to save outputs of node train_test_split: train_test_split([hourly_data,params:train_portion]) -> [train_data,test_data,plot].
The node function returned 2 output(s), whereas the node definition contains 3 output(s).
2022-12-28 17:41:05,455 - kedro.runner.sequential_runner - WARNING - No nodes ran. Repeat the previous command to attempt a new run.
